🟢 Vue.js
구글의 개발자였던 에반 유 (Evan You)에 의해 출시

🔸vue.프레임워크의 특징
- vue.js는 출발은 가장 늦었지만 다른 프레임워크들의 단점을 보완해 성능이 우수
- 사용성이 매우 뛰어난데 이런 강점을 중심으로 지속적으로 발전

🔸뷰의 기본 사용법과 특징
- CDN으로 설정하는 방법 (홈페이지에서 쉽게 주소 가져오기 / 컴퓨터 다운로드 저장해서 사용하기)
- 머스태시라고 불리는 {{}} 활용법  
- data 속성의 바인딩 관계를 이해


🔸data ❗❗속성❗❗은 
- 뷰안에서 사용할 데이터를 변수명으로 선언하여 관리하는곳
- 객체나 함수를 선언하여 데이터를 읽고 저장하는 일 수행

ex)
🔸data > {{sTitle}} 로 데이터값을 전달함🔻
data:{
    sTitle: 'Hello, World!"
}

---------------------------------------------------

🟡 단방향 바인딩과 v-bind 디렉티브 (지시문)
🔸 v-bind 
 - 데이터 바인딩 ◻️ html의 el를 한쪽으로 수정할때 사용하는 지시문 ◻️

    🔥예시 > elem attribute="abs" <-그냥값 
    🔥예시 > elem v-bind:attribute="abs" <-변수 

 - HTML의 어트리뷰트(attribute) 값을 수정할때 v-bind 라는 디렉티브를 이용해서 데이터 값을 브라우저 화면에 자동으로 반영하는 것을 의미
 - 변수값을 HTML 어트리뷰트에 연결함으로써 변수가 새로운 값으로 바뀔 때 ,수정할때 마다 HTML 엘리먼트에 실시간으로 렌더링
 - 클론(:) 중심으로 왼쪽에서 v-bind 를 기입하고, 오른쪽에는 html 엘레먼트의 어트리뷰트를 선언해서 바인딩으로 만들어진 값을 대입하는 식
 - 클론(:) 만 사용하면 ✔️'v-vind' 라는 명칭은 생략
    
---------------------------------------------------
    <body>
    <img v-bind:src="vla1" id="aa">
    <a v-bind:href="vla2" id="dd">
    </body>
    
    <script>
      new Vue({
        el: "#aa",
        data: {
          val1: "2.jpg",
          vla2: "main.html",
        },
      });
    </script>
---------------------------------------------------

🔹 머스태시와 v-bind의 차이점
머스태시 : HTML 의 앨리먼트 값 생성 / obj.textContent="hello"
<p>{{sTitle}}</P>
v-bind :  HTML 요소의 어트리뷰트 값 생성 / obj.setAttribute="helle"
<input v-bind:value="sDate">

---------------------------------------------------

🟡 양방향 바인딩과 v-model 디렉티브 (지시문)
🔹 양방향 데이터 바인드
 - 입력과 동시에 데이터가 동기화되어 표시되는 기능을 수행

🔸 v-model 디렉티브
 - html  어트리뷰트에 양방향 데이터 바인딩을 수행
 - 콜론(:)을 중심으로 왼쪽에서 v-model 을 기입하고 오른쪽에는 html 엘리먼트의 어트리뷰트 이름을 작성

 
 v-bind 디렉티브
 -sDate 값을 html 어트리뷰트에 ☀️보내기만 함☀️

 v-model 디렉티브
 -sMsg 값과 입력값이 ☀️서로 연동 됨☀️

---------------------------------------------------

🟡 조건 판단과 v-if, v-else 디렉티브
🔸 v-if 디렉티브
 - 조건이 충족될 때만 렌더링을 수행하도록 돋는 어트리뷰트
 🔻v-if,else 로 직업 bFlag 데이터에 접근하여 조건 판단🔻
 
 🔥<p v-if="bFlag == true"> 앞면! </P>
 🔥<p v-else>뒷면!</p>

 ---------------------------------------------------

🟡 반복문과 v-for 디렉티브
🔸 v-for 디렉티브를
- html 안에서 반복문으로 배열값을 읽어서 목록의 항목과 인덱스 변수에 저장하도록 돕는 어트리뷰트

반복문으로 fruits 과일 배열 데이터를 가져옴

🔥<li v-for = "item in fruits>
   fruits 안에 fruitsName 항목을 하나씩 가져와 html 로 렌더링
   {{item.fruitsName}}
</li>


🟡 이벤트 헨들러 실행과 v-on 디렉티브
🔸 v-on 디렉티브
- 뷰에서 발생하는 이벤트를 지켜보면서 DOM 엘리먼트를 제어할 수 있도록 도와 주는 어트리뷰트
- 뷰 안에서 사용자가 키보드나 마우스를 제어하는 형식의 이벤트가 발생했을때 이를 실행하는 함수와 바인딩 할때 사용

버튼을 누르면 fnChangeTitle 메소드로 이벤트 핸들러 수행
❗❗onclick 대신해서 쓸수있는 디렉토리❗❗
<button v-on:click="fnChangeTitle"> Click </button>

🔹이벤트 핸들러
- 이벤트가 발생했을때 실행되는 함수

🔹메소드(methods)
- 이벤트 핸들러 함수를 제작하여 할 때 미리 정의해 두고 사용
- 뷰 객체의 행위를 정의하는 용도, 즉 로직을 싱행하는 함수가 필요할때 이곳에 정의해 두고 사용

🔥methods:{
    버튼을 눌렀을때 sTitle 의 제목 변경
    fnChangeTitle(){
    this :Vue 객체의 인스턴스
    this.sTitle = 'Hello!',
    }
}

new Vue({
    el:""
    date :{} <간단한 명령
    methods:{} <복잡한 명령
})
