🟡 복잡한 로직과 computed 속성

🔸computed 속성
 -머스태시를 이용해 html  엘리먼트 값이 어떻게 변경 되는지 살펴보면서 필요한 연산 작업을 도움

🔸methods 속성
-이벤트 핸들러를 사용해 마우스 클릭과 같은 이벤트가 발생했을때 실행되는 로직에 활용
-메서드는 뷰 인스턴스에 포함해 사용하는 함수를 의미

✔️computed 속성과 ✔️methods 속성의 차이점
🔸computed 속성
-머스태시에 작성할 로직이 복잡하면 함수로 정의할때
-계산량이 많아 캐시가 필요할때 / 계산식이 필요할때

🔸methods 속성
-뷰의 이벤트 핸들러 로직을 함수로 정의할때

----------------------------------------------

🟡 컴포넌트로 html 엘리먼트 만들기 ❗❗❗❗중요❗❗❗❗❗
🔸컴포넌트란(component)란? / 새로 만들어쓰는 태그
🍀페이지를 구성할때 다른 파일로 저장해놓고 필요할때마다 이름을 붙여서 태그처럼 사용!
   my-header / my-main / m-footer 로 하나씩 페이지를 구성해서 만들기가 좋음 / 수정하기 편하고 / 여러번 가져다 쓰기도 편함 / 쪼개서 쓰지

-뷰의 중요한 특징 중 하나이며 html의 기본 엘리먼트 외에 자신만의 엘리먼트를 만들어 쓰는 모듈을 의미
-미리 만든 컴포넌트 이름을 가지고 여는 태그 (<>)와 닫는 태그(</>) 에 적용해 사용

🔸템플릿(template)이란?
-새로운 엘리먼트처럼 사용 할 수 있도록 컴포넌트를 등록할때 html 과 뷰 코드로 작성 된 소스를 의미

템플릿 속성
-컴포넌트 안에서 화면에 표시 될 부분을 처리하는 속성
-html,css,자바스크립트를 적용하여 표시 될 내용의 구조와 표현, 사용자와의 상호 작용 기능을 구현
-백틱(`) 키를 사용하여 문자열을 선언하면 줄바꿈이 있어도 html 문서로 자동으로 인식!

✔️컴포넌트의 속성 어튜리뷰트
🔸props ❗❗❗❗❗
- 컴포넌트에서 전달되는 어트리뷰트의 값으로써, 문자열이나 객체의 배열 형식을 사용

뷰의 컴포넌트 장점
-html 의 일반 엘리먼트처럼 사용할 수 있기 때문에 기능을 무한대로 확장 할 수 있는 잠재력
-다양한 주제별로 그의 맞는 엘리먼트를 설계하여 사용
-컴팩트한 개발이 가능하므로 유지보수 관점에서도 편리


🔸지역 컴포넌트 와 전역 컴포넌트의 장점들

✔️지역 컴포넌트:

구성 요소 간의 강한 결합: 지역 컴포넌트는 특정 컴포넌트 내에서 
사용되므로 해당 컴포넌트와 강한 관련을 가집니다. 
이로 인해 컴포넌트 간의 상태 및 이벤트 전달이 간단하고 명확해집니다.
캡슐화: 지역 컴포넌트는 특정 컴포넌트의 내부에 정의되므로 
외부 컴포넌트로부터의 접근을 제한할 수 있습니다. 
이는 코드의 보안성과 안정성을 높여줍니다.
지역 컴포넌트의 범위 제한: 지역 컴포넌트는 특정 컴포넌트 내에서만 
사용되므로 컴포넌트명 충돌을 방지하고 코드의 가독성을 높여줍니다.

✔️전역 컴포넌트:

재사용성: 전역 컴포넌트는 여러 컴포넌트에서 
공유되므로 재사용성이 높아집니다. 동일한 컴포넌트를 여러 곳에서 사용하고자 할 때 
전역 컴포넌트로 정의하여 중복 코드를 방지하고 개발 효율성을 향상시킬 수 있습니다.
확장성: 전역 컴포넌트는 어디서든지 접근 가능하므로 
애플리케이션의 다른 부분에서 쉽게 확장하여 사용할 수 있습니다. 
이는 애플리케이션의 기능 추가나 변경에 유연성을 제공합니다.
공통 UI 요소의 일관성: 전역 컴포넌트를 사용하여 공통 UI 요소를 정의하면 
애플리케이션 전반에서 일관된 UI를 유지할 수 있습니다. 
이는 사용자 경험을 향상시키고 디자인 일관성을 유지하는 데 도움을 줍니다.
각 컴포넌트의 장점을 적절하게 활용하면 코드의 
구조화와 재사용성을 개선할 수 있으며, 유지보수성과 개발 효율성을 향상시킬 수 있습니다.

----------------------------------------------

🟢상태 관리와 Vuex🟢

🟡 Vuex란?
-뷰의 코어 중 상태 관리를 위한 패턴 & ❗라이브러리❗
-하나의 뷰 또는 복수의 화면 사이에서 여러개의 컴포넌트를 사용하게 되면 각 ❗❗컴포넌트 간에 상태값 전달이나 공유❗❗
❗❗(컴포넌트 간 공유 할 수 있는 데이터 관리)❗❗
-localStorage에 저장되지 않고 메모리에 저장 되므로 새로고침 시 데이터 초기화
-상태를 새로고침 하더라도 데이터를 유지하기 위해서는 별도의 라이브러리 필요

🔸Vuex의 작동 원리 이해하기
actions-mutations-state-getters 4개의 속성

✅actions : 외부의 API 실행 같은 비동기 실행을 관리 할 때 사용
✅mutations : setter의 의미, 외부에서 동기 방식으로 저장할 때 사용
✅state : 공유한 상탯값 데이터 정의
✅getters : state의 데이터 값을 외부에서 읽어 올 때 사용

----------------------------------------------

🟢내비게이션과 라우터🟢

🟡 라우터란? ❗❗❗❗❗❗ (html로 따지면 a태그)

-페이지 간 이동을 위한 라이브러리
-경로와 컴포넌트를 등록하면 싱글 페이지 앱(SPA) 에서 사용자가 클릭한 경로로 화면이 이동하도록 도와줌

🔸주요기능
-active CSS 클래스를 자동으로 추가해주는 링크
(홈페이지에서 내가 보고 있는 페이지를 표시해주는)

CSR / SSR

----------------------------------------------

🟢새로고침이 불 필요한 SPA 만들기🟢

🟡 싱글 페이지 앱 (SPA, Single Page App)이란?
-서버에 매번 요청하더라도 새로고침이 불필요
-사용자의 서비스 경험 속도가 훨씬 빨라짐
ex) 구글 지메일, 구글 맵, 페이스북, 트위터 등

🟣node.js 설치방법
nodejs.org/ko/com 가서 설치 > 내 컴퓨터 cmd 실행해서 > node -v 입력 후 버전 확인하면 설치 완료 > 
node.js 를 이용하여 vue cli 를 설치 
'npm install -g @vue/cli' 입력하여 설치
명령어 이름 잘 모를때 help 라고 치면 명령어 알려줌

🔸npm 이용하여 프로젝트 생성

1. cd 또는 ls 명령 이용하여 프로젝트 생성 할 디렉토리로(폴더) 이동
> cd [프로젝트 생성할 경로]

2. [프로젝트명] 으로 폴더 생성 후 해당 폴더에 필요한 파일 자동 생성
> vue create[프로젝트명]

3. [프로젝트명]에 "." 을 입력하면 현재 폴더에 필요한 파일 자동 생성
> vue create .

---------------------------------------------------

설치후 node_modules에 대한 설명창 git 이 물어볼꺼임 너 저거 git에 저장할꺼야? 하면 아니 괜츈ㅎ 해주면 됨
git으로나 개인 하드에 옮길때 
node_modules 을 삭제하고 옮기기
그리고 다시 필요할땐 터미널에
npm install < 이라고 다시 입력하면 삭제했던 node_modules 을 다시 설치 할 수 있음

src . App.vue 에서 프로젝트 작업을 할꺼임
index는 절대 수정하지 않음

----------------------------------------------------
💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥💥
vue.2 에서는 <div id="app"></div> <최상위 루트는 무조건 한개만 가능!