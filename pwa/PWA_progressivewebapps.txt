"Progressive Web Apps"
-순수 자바스크립트로 PWA 만들기

01. PWA (프로그레시브 웹 앱)
02. PWA 필수 요소와 주요 기능
03. 매니페스트 작성하기
04. 서비스 워커 작성하기
05. 메인 화면 작성하고 실행하기
06. 서비스워커 동작 확인 및 삭제

-----------------------------------------------

Aos-자바 언어 / Ios-C 언어 
네이티브앱 - 동일한 언어로 만들어진 앱

------------------------------------------------

*네이티브 앱
네이티브 앱은 기기에 최적화 된 기능을 구현한다
장점
- 스마트폰에 최적화 된 기능을 구현
- 전 세계를 시장으로 삼을 수 있다
- 홈 화면에서 아이콘을 눌러 손쉽게 접속
- 알림을 통해 재방문을 유도할 수있음
단점
- 개발 난이도가 높고 시간이 오래 걸린다
- 같은 서비스를 운영체제별로 만들어줘야 한다
- 업데이트가 생기면 다시 설치해야함
- 앱 시장이 포화 상태여서 선택 받기가 어려움
- 기기의 용량을 많이 차지함

------------------------------------------------

*모바일 웹앱
모바일 웹앱은 비용이 저렴하고 업데이트하기 쉽다.
장점
- 이미 익숙한 웹 기술을 그대로 이용 할수있다
- 개발 시간을 단축 할수있음
- 웹 브라우저만 있으면 어디든 배포 가능
- 실시간으로 유지 보수 할수있다

단점
- 모든 하드웨어의 기능을 사용할수없다
- 네이티브 앱과 같은 푸쉬알림 기능을 사용 할 수 없다
- 앱 스토어, 플레이 스토어를 이용 할 수 없다
- 네이티브 앱과 같은 빠르고 충부한 사용자 경험에 제약이 있다
- 인터넷 접속이 끊어지면 사용 할 수 없다

------------------------------------------------

*하이브리드 앱
하이브리드 앱은 네이티브 앱과 웹앱의 강점을 합치다
장점
- 기존에 사용하던 웹 개발 기술을 모든 운영체제에서 그대로 사용 할 수 있다
- 같은 코드를 모바일 운영체제 별로 다르게 패키징 할 수 있다
- 네이티브 앱처럼 앱 스토어, 플레이 스토어에 배포 할 수 있다
- 네이티브 앱과 유사한 사용자 경험을 제공한다.

단점
- 하드웨어 기능을 사용 할 수 있으나 연결해주는 플러그인에 의존해야 하므로 제약이 있을 수 있다
- 네이티브 앱의 배포와 같으므로 업데이트가 생기면 다시 내려 받아야한다
- 앱 시장이 포화 상태여서 선택 받기가 어렵다
- 네이티브 앱과 같은 성능을 내는 데는 한계가 있다

------------------------------------------------
01. PWA 의 장단점

*PWA : 프로그래시브 웹 앱
프로그래시브 웹 앱 = 네이티브앱 + 모바일웹앱 + 하이브리드앱
장점
- 이미 익숙한 웹 기술을 그대로 이용 할 수 있다
- 개발 시간을 단축 할 수 있다
- 푸시 알림, 오프라인캐시 , https를 사용 할 수 있다 
- 웹 브라우저만 있으면 어디든 배포 할 수 있다
- '홈 화면 설치' 기능을 통해 OS 응용프로그램으로 설치 할 수 있다
- 실시간으로 유지 , 보수 할 수 있다
- 빠른 실행 속도로 네이티브 앱과 유사한 사용자 경험을 제공 할 수 있다

단점
- 하드웨어 사용은 웹 API 를 통하므로 웹표준을 지원하는 브라우저가 반드시 필요하다
- 앱 스토어, 플레이 스토어를 이용 할 수 없다
- 하지만 코르도바를 사용하면 동일한 코드베이스로 배포 할 수 있다 
- 안드로이드, 윈도우 OS 는 PWA의 모든 기능을 사용 할 수 있으나 현재 iOS의 경우는 일부만 사용 할 수 있다


* 본질은 "웹" 이지만 > "앱" 처럼 쓸 수 있어야 한다 -> 네이티브 앱과 똑같은 사용자 경험을 제공하는것이 궁극적인 목표 ->
  조금씩 앞으로 나아가야(Progressive) 한다는 철학
 


02. PWA 필수 요소와 주요 기능

* PWA 필수 요소
- 서비스 워커
- 웹앱 매니페스트
- ⭐https - github / http = dothome < 닷홈은 실행 안됨

* 주요 기능 (네이티브 앱과 같은 경험)
- 푸쉬 알림
- 홈 화면에 추가(A2HS, Add To Home Screen)
- 웹 API


1) 서비스 워커⭐⭐⭐⭐필수요소
- 웹 브라우저 내에 있음
- 웹 페이지와 분리
- 항상 실행되고 있는 백그라운드 프로그램
- 캐시관리

2) 웹 앱 매니페스트.json : 내용이 거의 똑같아서 기본적인 탬플릿을 가져다가 사용하는 경우가 많음 / 
- 앱 소개 정보
- 앱 기본 설정
- JSON 파일 형식
- A2HS

3) 보안을 강화한 'https'
- 암호화와 인증을 거쳐 보안을 강화한 웹 통신 규약
- 반응 속도가 http보다 빠른 
- PWA는 로컬에서도 동작 가능
(컴퓨터의 고유의 name은 숫자로 이루어져 있고 그것을 ip라 부른다)
대한민국 211.~시작
https://localhost
https://127.0.01
rootback 이라고 불린다

------------------------------------------------

{
🔹"name": "Hello PWA",
  name : 첫화면(스플래시 스크린)에 출력 될 이름
         옴니(다운로드)버튼에도 출력
         홈 화면 아이콘

🔹"short_name": "PWA",
  short_name : 주로 모바일에서 사용
               설치 배너에 출력

🔹"description": "PWA 시작",
  description : 웹 크롤러(검색엔진)이 정보 가져갈때 사용

🔹"scope": "/",
  scope : 매니페스트에 정의된 내용이 적용 될 수 있는 파일들의 경로 범위를 지정
          웹앱이 어느 폴더에 있는지 지정
          "." : 현재 폴더에 있는 모든 파일

🔹"start_url": "./",
  start_url : index.html 을 생략해도 됨
              프로그램을 실행하면 시작 될 URL을 루트 경로(./) 로 설정
              index.html 파일이 있는 폴더 지정

🔹"display": "fullscreen",
  display : 기기의 최대 화면,
            운영체제가 ✔️fullscreen을 지원하지 않으면 standalone 으로 적용
  🔶standalone : 브라우저의 주소표시줄, 상태표시줄 제거하여 일반 앱처럼 표시
               ✔️가장 보편적으로 사용 (ios에서는 지원이 잘 안됨 그래서 mata name 을 추가해주기 )
  minimal-ul : 상단에 주소 표시줄 추가해주기
               운영체제가 minimal-ul를 지원하지 않으면 standalone으로 적용 (많이 사용하지 않음❌)
  browser : 웹 브라우저와 동일한 모습으로 실행

🔹"orientation": "portrait",
  orientation : 화면의 방향을 나타냄
  portrait : 세로로 화면 실행  
  landscape : 가로로 화면 실행
  
🔹"theme_color": "#ffffff",
  theme_color : 앱 테마 색상 (큰 background_color 위 시계줄 배경색)

🔹"background_color": "#ffffff",
  background_color : 앱 화면 배경 색
  
🔹"icons": 여러개 지정 가능 [
    {
      "src": "images/icons/android-chrome-512x512.png",
      src : 이미지의 절대주소 또는 상대주소

      "sizes": "512x512",
      sizes : 이미지의 픽셀크기

      "type": "image/png"
      type : 이미지의 파일유형
      
    },
    {
      "src": "images/icons/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ]
}

🔹shorcuts
- MS 제품군 OS 아래쪽 아이콘 > 마우스 오른쪽 > 메뉴들 중 상단 메뉴 EX) 새창
name : 마우스 오른쪽 클릭시 출력 될 이름
short_name : 모바일에서 앱 설치 후 클릭 했을때 출력
index.html 실행 > 옴니버튼 > 다운로드 실행 > 운영체제 하단 설치 된 파일에서 마우스 오른쪽 > 이름에 작성 된 내용과 아이콘 확인

{
  "name": "Hello PWA",
  "short_name": "PWA",
  "description": "PWA 시작",
  "scope": "/",
  "start_url": "./",
  "display": "fullscreen",
  "orientation": "portrait",
  "theme_color": "#ffffff",
  "background_color": "#ffffff",
  "icons": [
    {
      "src": "images/icons/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    },
    {
      "src": "images/icons/android-chrome-192x192.png",
      "sizes": "192x192",
      "type": "image/png"
    }
  ],
"shortcuts" : [
  {  
  "name": "첫번째 메뉴",
  "short_name": "MENU 1",
  "description": "첫번째 메뉴 입니다",
  "url": "./",
  "icons": [
      "src": "images/icons/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
  ],
  {  
  "name": "두번째 메뉴",
  "short_name": "MENU 2",
  "description": "두번째 메뉴 입니다",
  "url": "./",
  "icons": [
    {
      "src": "images/icons/android-chrome-512x512.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ]
}
  ]



*서비스워커 생애주기(Lifecycle) 이벤트로 사용 할 수 있다

서비스워커등록 (index.html)
(Registration)
            🔻
install (서비스워커 처음설치)
            🔻
activate
(서비스워커 동작, 변경)
                          🔻
fetch(데이트요청)<->Idle(이벤트 기다림)


self는윈도우를\\

self.add.EventListener('install',pEvent=>{
  console.log("서비스 워커 설치완료")
});

서비스 워커가 등록 됨!
서비스워커 설치함!



self.add.EventListener('activate',pEvent=>{
  console.log("서비스 워커를 변경해줘")
});


self.add.EventListener('fetch',pEvent=>{
  console.log("데이터 요청(fetch)!",pEvent)
});



🔹install
- 서비스 워커가 처음 설치 될때 실행
- 캐시 파일 저장

🔹activate
- 서비스워커 설치완료 시 실행
- 서비스워커의 업데이트 담당
- 기존 캐시 제거

🔹fetch
- 서비스워커 실행 시 작업할 내용 작성
- 브라우저가 서버에 http 요청시 오프라인 상태면 캐시 파일 읽기

✔️서비스워커가 쿠키삭제 필요할때
작업자검사 >  어플리케이션 >  storage > clear site data 로 삭제하기 쿠키 삭제





